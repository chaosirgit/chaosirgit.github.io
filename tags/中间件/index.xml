<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on Ethan Kuo Blog</title>
    <link>https://blog.adminchao.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content in 中间件 on Ethan Kuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jul 2019 18:33:53 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel Throttle 中间件接口形式</title>
      <link>https://blog.adminchao.com/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Thu, 25 Jul 2019 18:33:53 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</guid>
      <description>前言    Laravel 自带请求频率限制中间件,但是这个中间件返回的并不是信息,在日常工作总可能需要以接口的形式返回
步骤    生成中间件文件    php artisan make:middleware ThrottleRequests 拷贝代码到 app\Http\Middleware\ThrottleRequests.php    &amp;lt;?php namespace App\Http\Middleware; use Closure; use RuntimeException; use Illuminate\Support\Str; use Illuminate\Cache\RateLimiter; use Illuminate\Support\InteractsWithTime; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\Exception\HttpException; class ThrottleRequests { use InteractsWithTime; /** * The rate limiter instance. * * @var \Illuminate\Cache\RateLimiter */ protected $limiter; /** * Create a new request throttler. * * @param \Illuminate\Cache\RateLimiter $limiter * @return void */ public function __construct(RateLimiter $limiter) { $this-&amp;gt;limiter = $limiter; } /** * Handle an incoming request.</description>
    </item>
    
    <item>
      <title>Laravel Middleware 中间件用法</title>
      <link>https://blog.adminchao.com/posts/laravel-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 08 Jun 2018 11:26:34 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%94%A8%E6%B3%95/</guid>
      <description>前言    Laravel 中间件非常好用。
用法    注册中间件    打开 app/Http/Kernel.php 解释如下:
class Kernel extends HttpKernel { /** * 全局中间件 */ protected $middleware = [ \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class, \App\Http\Middleware\EncryptCookies::class, \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class, \Illuminate\Session\Middleware\StartSession::class, \Illuminate\View\Middleware\ShareErrorsFromSession::class, //\App\Http\Middleware\VerifyCsrfToken::class,  \Lib\ClusterSession\Middleware\StartSession::class, ]; /** * 路由中间件 */ protected $routeMiddleware = [ &amp;#39;access_control&amp;#39; =&amp;gt; \App\Http\Middleware\AccessControl::class, &amp;#39;api&amp;#39; =&amp;gt; \App\Http\Middleware\Api::class, &amp;#39;auth&amp;#39; =&amp;gt; \App\Http\Middleware\Authenticate::class, //别名 (用这个举例)  &amp;#39;admin_auth&amp;#39; =&amp;gt; \App\Http\Middleware\AdminAuthenticate::class, &amp;#39;server_auth&amp;#39; =&amp;gt; \App\Http\Middleware\ServerAuthenticate::class, &amp;#39;CORS&amp;#39; =&amp;gt; \App\Http\Middleware\CORS::class ]; } 创建中间件    创建 app/Http/Middleware/Authenticate.</description>
    </item>
    
  </channel>
</rss>
