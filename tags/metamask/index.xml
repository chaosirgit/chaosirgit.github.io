<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MetaMask on Ethan Kuo Blog</title><link>https://blog.ethankuo.info/tags/metamask/</link><description>Recent content in MetaMask on Ethan Kuo Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 09 Mar 2022 05:04:02 +0000</lastBuildDate><atom:link href="https://blog.ethankuo.info/tags/metamask/index.xml" rel="self" type="application/rss+xml"/><item><title>EIP-712:How to Create Ethereum One-Click Login Application</title><link>https://blog.ethankuo.info/posts/eip-712how-to-create-ethereum-one-click-login-application/</link><pubDate>Wed, 09 Mar 2022 05:04:02 +0000</pubDate><guid>https://blog.ethankuo.info/posts/eip-712how-to-create-ethereum-one-click-login-application/</guid><description>Preface Authorized DAPP login using Ethereum EIP-712 protocol signature
Design the front end needs to authorize the application to connect to the wallet before using the signature get the wallet address after successful authorization then click the signature button use the wallet address to request the back-end get random number API the backend generates a random number, puts the wallet address as the key and the random number as the value into the cache, with an expiration time of 5 minutes (security considerations) the front-end write the random number into the signature message body call the wallet signature the obtained signature requests the back-end login API the backend decrypts the signature Verify that the decrypted wallet address is the same as the submitted address Register or login The back-end get random number API is not documented in this document</description></item></channel></rss>