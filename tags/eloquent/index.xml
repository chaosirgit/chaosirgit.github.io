<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eloquent on Ethan Kuo Blog</title><link>https://blog.adminchao.com/tags/eloquent/</link><description>Recent content in Eloquent on Ethan Kuo Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 10 Jan 2019 15:29:08 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/tags/eloquent/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Eloquent Return Result Optimization</title><link>https://blog.adminchao.com/posts/laravel-eloquent-return-result-optimization/</link><pubDate>Thu, 10 Jan 2019 15:29:08 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-return-result-optimization/</guid><description>Preface We all know that using the appends property in the model to build the accessor makes the return result add some field information, but then there is a disadvantage that all the return results of this model will have these field information, which is not appropriate if the interface specifies a strict return information field.
Can there be a good way to show or hide these fields dynamically?</description></item><item><title>Laravel Eloquent Advanced Usage</title><link>https://blog.adminchao.com/posts/laravel-eloquent-advanced-usage/</link><pubDate>Wed, 22 Aug 2018 11:02:10 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-advanced-usage/</guid><description>Preface When using Laravel Eloquent model, I deeply appreciate what elegance is! Although you can chain calls to DB operation methods in the business logic to solve the problem, but there is always less elegance! Here is a special record of the operation methods with Eloquent to make the code elegant.
Target leftJoin where Target SQL 1 select * from user_second left join user on user_second.</description></item><item><title>Standalone Use Of Eloquent</title><link>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</link><pubDate>Wed, 04 Jul 2018 14:14:22 +0000</pubDate><guid>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</guid><description>Preface Laravel&amp;rsquo;s Eloquent is a great ORM, Eloquent is a standalone module, we can also use Eloquent in our own projects through composer, this article will explain in detail how to integrate Eloquent in your own projects.
Installation In the project directory, execute
1 composer require illuminate/database:^5.0 Or add it directly to the composer.json file:
1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;require&amp;#34;: { &amp;#34;illuminate/database&amp;#34;: &amp;#34;^5.</description></item><item><title>Laravel Eloquent Bracket Query</title><link>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</link><pubDate>Fri, 08 Jun 2018 12:36:54 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</guid><description>Is equivalent to select * from queue_second_sold where status=0 and (buy_user_id = 341 or (sell_user_id = 341 and buy_user_id != 0)) order by id desc,and is used as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Trading Floor - Directed Trading * @param Request $request * @return \Illuminate\Http\JsonResponse */ public function soldList(Request $request){ $type = $request-&amp;gt;get(&amp;#39;type&amp;#39;,0); // Trading Floor $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $user = User::getUserInfo(); if($type == 1){ //Directed Transactions $results = QueueSecondSold::where(&amp;#39;status&amp;#39;,0) -&amp;gt;where(function($query) use ($user){ $query-&amp;gt;where(&amp;#39;sell_user_id&amp;#39;,$user-&amp;gt;id) -&amp;gt;where(&amp;#39;buy_user_id&amp;#39;,&amp;#39;!</description></item></channel></rss>