<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on Ethan Kuo Blog</title><link>https://blog.adminchao.com/tags/php/</link><description>Recent content in PHP on Ethan Kuo Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 07 Mar 2022 15:38:12 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Web3 Usage (Backend-PHP)</title><link>https://blog.adminchao.com/posts/web3-usage-backend-php/</link><pubDate>Mon, 07 Mar 2022 15:38:12 +0000</pubDate><guid>https://blog.adminchao.com/posts/web3-usage-backend-php/</guid><description>Preface I&amp;rsquo;ve completed two DAPPs so far last year, and I have some knowledge of Web3, and this is a record of the usage of the Backend library web3.php.
Web3 Usage (Front-end)
Web3 Usage (Backend-Golang)
Installation Web3.php
If you are using Laravel 8 or below, i.e. GuzzleHttp 6.x, you can install sc0vu/web3.php
In composer.json find the following and modify it
1 &amp;#34;minimum-stability&amp;#34;: &amp;#34;dev&amp;#34; Then</description></item><item><title>Laravel Passport Personal Token Multi-User Login</title><link>https://blog.adminchao.com/posts/laravel-passport-personal-token-multi-user-login/</link><pubDate>Fri, 27 Mar 2020 21:08:27 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-passport-personal-token-multi-user-login/</guid><description>Preface Recently a project needs to use multi-user table system authentication, using Passport to achieve for Token issuance and authentication, but for multi-user table login Passport is still difficult to achieve, see some multi-user table login is also used GuzzleHttp carry additional parameters to achieve, does not meet my needs. After a period of exploration, I finally implemented Passport through the personal token multi-user table login.
Step Laravel Version 6.</description></item><item><title>Laravel Throttle Middleware Response With JSON</title><link>https://blog.adminchao.com/posts/laravel-throttle-middleware-response-with-json/</link><pubDate>Thu, 25 Jul 2019 18:33:53 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-throttle-middleware-response-with-json/</guid><description>Preface Laravel comes with a request frequency limitation middleware, but this middleware does not return JSON, which is always needed in the form of JSON in daily work.
Step Generate middleware file 1 php artisan make:middleware ThrottleRequests Copy the code to app\Http\Middleware\ThrottleRequests.phpamp;lt;?</description></item><item><title>Laravel Using WorkerMan(GateWay)</title><link>https://blog.adminchao.com/posts/laravel-using-workermangateway/</link><pubDate>Mon, 22 Jul 2019 16:30:53 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-using-workermangateway/</guid><description>Preface Document the process of using WorkerMan or GateWay in Laravel.
Begin Installation 1 composer require workerman/gateway-worker Create command Use artisan to create a command tool to start WorkerMan because WorkerMan can only be started from the command line.
1 php artisan make:command WorkerMan Change the /app/Console/Commands/WorkerMan.php file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 &amp;lt;?</description></item><item><title>Guzzle Basic Usage</title><link>https://blog.adminchao.com/posts/guzzle-basic-usage/</link><pubDate>Mon, 17 Jun 2019 23:51:47 +0000</pubDate><guid>https://blog.adminchao.com/posts/guzzle-basic-usage/</guid><description>Installation 1 composer require guzzlehttp/guzzle:~6.0 Use 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;?php use GuzzleHttp\Client; $client = new Client(); $api = &amp;#39;http://www.test.com/api/register&amp;#39;; $request_data = [&amp;#39;username&amp;#39;=&amp;gt;&amp;#39;111&amp;#39;,&amp;#39;password&amp;#39;=&amp;gt;&amp;#39;222&amp;#39;]; $sign = md5(&amp;#39;key&amp;#39;); $response = $client-&amp;gt;request(&amp;#39;POST&amp;#39;,$api,[&amp;#39;form_params&amp;#39;=&amp;gt;$request_data,&amp;#39;headers&amp;#39;=&amp;gt;[&amp;#39;Sign&amp;#39;=&amp;gt;$sign]]); $res_string = $response-&amp;gt;getBody()-&amp;gt;getContents(); $res_data = json_decode($res_string,true); var_dump($res_data); Encapsulation of requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;lt;?</description></item><item><title>Red Packet Class</title><link>https://blog.adminchao.com/posts/red-packet-class/</link><pubDate>Sat, 16 Mar 2019 10:39:09 +0000</pubDate><guid>https://blog.adminchao.com/posts/red-packet-class/</guid><description>Preface Copied the bonus class written by someone else and it feels pretty good to use. The original address is in the comments. Hereby record
Codeamp;lt;?</description></item><item><title>Lottery Algorithm</title><link>https://blog.adminchao.com/posts/lottery-algorithm/</link><pubDate>Sun, 13 Jan 2019 18:08:37 +0000</pubDate><guid>https://blog.adminchao.com/posts/lottery-algorithm/</guid><description>Codes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 &amp;lt;?php namespace App\Utils; class PROBABILITY { //chance is the probability of drawing, the smaller the value, the smaller the probability // $arr = [ // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;$1000 phone&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;1&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;$100 voucher&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;10&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;$10 voucher&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;100&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;Thanks for participating&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;700&amp;#39;], // ]; /** * The lottery probability algorithm * @param array $prizeArr array of prizes * @param string $index Probability key name * @return mixed the prizes drawn */ public static function lottery_raffle($prizeArr,$index=&amp;#39;chance&amp;#39;) { $result = &amp;#39;&amp;#39;; // array set to a collection $prize = collect($prizeArr); $randArr = $prize-&amp;gt;pluck($index)-&amp;gt;toArray(); // total probability precision of the probability array $proSum = array_sum($randArr); //probability array loop foreach ($randArr as $key =&amp;gt; $val) { //generate a random number - from 1 to probability and generate a random send $randNum = mt_rand(1, $proSum); //hit - if the random send is less than this probability value if ($randNum &amp;lt;= $val) { // echo &amp;#39;yes:&amp;#39;.</description></item><item><title>Scan PHP For Dangerous File Scripts</title><link>https://blog.adminchao.com/posts/scan-php-for-dangerous-file-scripts/</link><pubDate>Sat, 12 Jan 2019 13:30:20 +0000</pubDate><guid>https://blog.adminchao.com/posts/scan-php-for-dangerous-file-scripts/</guid><description>Code Laravel php artisan make:command ScanHorse:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 &amp;lt;?</description></item><item><title>Laravel Eloquent Return Result Optimization</title><link>https://blog.adminchao.com/posts/laravel-eloquent-return-result-optimization/</link><pubDate>Thu, 10 Jan 2019 15:29:08 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-return-result-optimization/</guid><description>Preface We all know that using the appends property in the model to build the accessor makes the return result add some field information, but then there is a disadvantage that all the return results of this model will have these field information, which is not appropriate if the interface specifies a strict return information field.
Can there be a good way to show or hide these fields dynamically?</description></item><item><title>Standalone Use Of Eloquent</title><link>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</link><pubDate>Wed, 04 Jul 2018 14:14:22 +0000</pubDate><guid>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</guid><description>Preface Laravel&amp;rsquo;s Eloquent is a great ORM, Eloquent is a standalone module, we can also use Eloquent in our own projects through composer, this article will explain in detail how to integrate Eloquent in your own projects.
Installation In the project directory, execute
1 composer require illuminate/database:^5.0 Or add it directly to the composer.json file:
1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;require&amp;#34;: { &amp;#34;illuminate/database&amp;#34;: &amp;#34;^5.</description></item><item><title>Laravel overtrue/wechat Usage</title><link>https://blog.adminchao.com/posts/laravel-overtrue-wechat-usage/</link><pubDate>Fri, 08 Jun 2018 12:51:35 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-overtrue-wechat-usage/</guid><description>Web Authorization Login Middleware Create app/Http/Middleware/WechatAuth.php middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 public function handle($request, Closure $next, $account = &amp;#39;default&amp;#39;, $scopes = null) { // The case where $account and $scopes are written backwards if (is_array($scopes) || (\is_string($account) &amp;amp;&amp;amp; str_is(&amp;#39;snsapi_*&amp;#39;, $account))) { list($account, $scopes) = [$scopes, $account]; $account || $account = &amp;#39;default&amp;#39;; } $isNewSession = false; $sessionKey = \sprintf(&amp;#39;user_id&amp;#39;, $account); $config = config(\sprintf(&amp;#39;wechat.</description></item><item><title>Laravel Qiniu Layui Upload Image</title><link>https://blog.adminchao.com/posts/laravel-qiniu-layui-upload-image/</link><pubDate>Fri, 08 Jun 2018 12:47:33 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-qiniu-layui-upload-image/</guid><description>Installation 1 composer require qiniu/php-sdk Usage PHP returns the upload token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php namespace App\Http\Controllers\Admin; use App\Setting; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Qiniu\Auth; class DefaultController extends Controller { public function upload(){ $accessKey = Setting::getValueByKey(&amp;#39;qn_accessKey&amp;#39;); $secretKey = Setting::getValueByKey(&amp;#39;qn_secretKey&amp;#39;); $bucket = Setting::getValueByKey(&amp;#39;qn_bucket_static&amp;#39;); $baseUrl = Setting::getValueByKey(&amp;#39;qn_static_url&amp;#39;); //Build forensic objects $auth = new Auth($accessKey,$secretKey); //generate upload token $token = $auth-&amp;gt;uploadToken($bucket); return $token; } } layui carry token to request seven cows cloud upload interface layui HTML code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;Thumbnail&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;thum&amp;#34;&amp;gt;Upload image&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;thum_img&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;Detailed image&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;imgs&amp;#34;&amp;gt; Upload &amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;imgs_list&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; layui JS code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 function uploadInsts(elem,multiple,number,imgDiv){ if(multiple == null){ multiple = false; } if(number == null){ number = 0; } layui.</description></item><item><title>Laravel Excel Usage</title><link>https://blog.adminchao.com/posts/laravel-excel-usage/</link><pubDate>Fri, 08 Jun 2018 12:44:33 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-excel-usage/</guid><description>Laravel-Excel Plugin Usage Installation composer installation 1 composer require &amp;#34;maatwebsite/excel:~2.1.0&amp;#34; After installation, modify config/app.php and append the following to the providers array 1 Maatwebsite\Excel\ExcelServiceProvider::class, Also append the following to the aliases array: 1 &amp;#39;Excel&amp;#39; =&amp;gt; Maatwebsite\Excel\Facades\Excel::class, Generate configuration file config/excel.php : 1 php artisan vendor:publish --provider=&amp;#34;Maatwebsite\Excel\ExcelServiceProvider&amp;#34; Usage To parse an Excel file 1 2 3 ini_set (&amp;#39;memory_limit&amp;#39;, &amp;#39;1024M&amp;#39;); $data = Excel::load(&amp;#39;excel.</description></item><item><title>Laravel ElasticSearch Plugin</title><link>https://blog.adminchao.com/posts/laravel-elasticsearch-plugin/</link><pubDate>Fri, 08 Jun 2018 12:43:00 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-elasticsearch-plugin/</guid><description>ElasticSearch Problems and Usage The solution of index.max_result_window error 1 curl -XPUT &amp;#34;http://localhost:9200/my_index/_settings&amp;#34; -d &amp;#39;{ &amp;#34;index&amp;#34; : { &amp;#34;max_result_window&amp;#34; : 100000000 } }&amp;#39; Search Package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static function SearchAccountLogEs($must = array(),$must_not = array(),$should = array(),$aggs = array(),$size = 10,$page = 1,$sort = array(),$debug = false){ $index = Config::get(&amp;#39;elasticsearch.</description></item><item><title>Laravel Eloquent Bracket Query</title><link>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</link><pubDate>Fri, 08 Jun 2018 12:36:54 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</guid><description>Is equivalent to select * from queue_second_sold where status=0 and (buy_user_id = 341 or (sell_user_id = 341 and buy_user_id != 0)) order by id desc,and is used as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Trading Floor - Directed Trading * @param Request $request * @return \Illuminate\Http\JsonResponse */ public function soldList(Request $request){ $type = $request-&amp;gt;get(&amp;#39;type&amp;#39;,0); // Trading Floor $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $user = User::getUserInfo(); if($type == 1){ //Directed Transactions $results = QueueSecondSold::where(&amp;#39;status&amp;#39;,0) -&amp;gt;where(function($query) use ($user){ $query-&amp;gt;where(&amp;#39;sell_user_id&amp;#39;,$user-&amp;gt;id) -&amp;gt;where(&amp;#39;buy_user_id&amp;#39;,&amp;#39;!</description></item><item><title>Tree Classification</title><link>https://blog.adminchao.com/posts/tree-classification/</link><pubDate>Fri, 08 Jun 2018 12:33:49 +0000</pubDate><guid>https://blog.adminchao.com/posts/tree-classification/</guid><description>A function for tree classification 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public static function tree($data,$pid=0,$level=0){ $results = array(); foreach ($data as $value){ // recursion point If the parent id of the current record is equal to the incoming parent id, then this record is a child of the incoming parent id if($value[&amp;#39;p_id&amp;#39;] == $pid){ $value[&amp;#39;level&amp;#39;] = $level; // recursive call to get the sublevels under the sublevel $value[&amp;#39;children&amp;#39;] = self::tree($data,$value[&amp;#39;id&amp;#39;],$level + 1); //push assigns the above result to the returned data $results[] = $value; } // Recursive exit: traversal complete.</description></item><item><title>Laravel Global Scopes</title><link>https://blog.adminchao.com/posts/laravel-global-scopes/</link><pubDate>Fri, 08 Jun 2018 11:41:08 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-global-scopes/</guid><description>Preface The global scope is used to globally add the execution constraint to all the model operations involved after adding it. For example: the original select * from user becomes select * from user where is_delete = 0 after adding
Usage Create App/Scopes/SiteScope.php ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;?</description></item><item><title>Laravel Generating Test Data</title><link>https://blog.adminchao.com/posts/laravel-generating-test-data/</link><pubDate>Thu, 08 Mar 2018 11:14:46 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-generating-test-data/</guid><description>Preface Using Laravel Faker to generate test data is very convenient for testing and debugging.
Usage Open app/database/factories/ModelFactory.php Edit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 $factory-&amp;gt;define(App\User::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //chinese package return [ &amp;#39;openid&amp;#39; =&amp;gt; str_random(10), &amp;#39;nickname&amp;#39; =&amp;gt; $faker-&amp;gt;name, //Chinese name &amp;#39;mobile&amp;#39; =&amp;gt; $faker-&amp;gt;phoneNumber, &amp;#39;avatar&amp;#39; =&amp;gt; $faker-&amp;gt;imageUrl(), &amp;#39;integral&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(3), &amp;#39;balance&amp;#39; =&amp;gt; $faker-&amp;gt;randomFloat(2, 0, 10000), // Random floating point number, 2 decimal places, min 0, max 10000 &amp;#39;birthday&amp;#39; =&amp;gt; $faker-&amp;gt;date(), &amp;#39;created_time&amp;#39; =&amp;gt; $faker-&amp;gt;unixTime(), &amp;#39;password&amp;#39; =&amp;gt; App\User::generatePassword(&amp;#39;haha123&amp;#39;), // Available model methods to generate data ]; }); $factory-&amp;gt;define(App\Product::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); // Use the model to generate the array to be associated with the random $seller = App\Seller::where(&amp;#39;status&amp;#39;, 1)-&amp;gt;get()-&amp;gt;toArray(); foreach ($seller as $value) { $row[] = $value[&amp;#39;id&amp;#39;]; } return [ &amp;#39;product_no&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(8), &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;【Test Products】&amp;#39; .</description></item></channel></rss>