<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>模型 on Ethan Kuo Blog</title>
    <link>https://blog.adminchao.com/tags/%E6%A8%A1%E5%9E%8B/</link>
    <description>Recent content in 模型 on Ethan Kuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Jan 2019 15:29:08 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/tags/%E6%A8%A1%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel Eloquent 返回结果优化</title>
      <link>https://blog.adminchao.com/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 10 Jan 2019 15:29:08 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</guid>
      <description>前言    我们都知道在模型中使用 appends 属性来构建访问器使得返回结果添加一些字段信息，但是这样的话有一个坏处，就是所有这个模型的返回结果都会有这些字段信息，如果接口中规定了严格的返回信息字段，这样就不合适了。
能不能有好的方法动态的显示或隐藏这些字段信息呢？
答案是肯定的。
动态显示    在接口中临时显示    首先在 Model 中构建访问器    public function getUsernameAttribute(){ return $this-&amp;gt;hasOne(&amp;#39;App\User&amp;#39;,&amp;#39;id&amp;#39;,&amp;#39;user_id&amp;#39;)-&amp;gt;value(&amp;#39;username&amp;#39;); } Model 不建立 appends 属性    单条记录    public function getUserInfo(Request $request){ $id = $request-&amp;gt;get(&amp;#39;id&amp;#39;,null); $result = User::find($id)-&amp;gt;append(&amp;#39;username&amp;#39;); return response()-&amp;gt;json($result); } 多条记录    public function getUsers(Request $request){ $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $results = User::orderBy(&amp;#39;id&amp;#39;,&amp;#39;desc&amp;#39;) -&amp;gt;paginate($limit) -&amp;gt;transform(function($item,$key){ $item-&amp;gt;append(&amp;#39;username&amp;#39;); return $item; //如果不 return 出去返回的是 null  }); return response()-&amp;gt;json($results); } 如果不想用 append 方法的关联关系可以这样用 或者报 Method items does not exist.</description>
    </item>
    
    <item>
      <title>Laravel Eloquent 列值查询</title>
      <link>https://blog.adminchao.com/posts/laravel-eloquent-%E5%88%97%E5%80%BC%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 08 Jun 2018 12:39:33 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-eloquent-%E5%88%97%E5%80%BC%E6%9F%A5%E8%AF%A2/</guid>
      <description>相当于 select id from user where mobile like &#39;%:mobile%&#39; ：
$search_user = User::where(&amp;#39;mobile&amp;#39;,&amp;#39;like&amp;#39;,&amp;#39;%&amp;#39;.$mobile.&amp;#39;%&amp;#39;)-&amp;gt;get()-&amp;gt;pluck(&amp;#39;id&amp;#39;); </description>
    </item>
    
    <item>
      <title>Laravel Eloquent 连接查询</title>
      <link>https://blog.adminchao.com/posts/laravel-eloquent-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 08 Jun 2018 12:38:16 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-eloquent-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</guid>
      <description>相当于 select count(*) from user as a left join chunk as b on a.id=b.user_id where a.parent_id = 341
$chunk_count = User::leftJoin(&amp;#39;chunk&amp;#39;,&amp;#39;user.id&amp;#39;,&amp;#39;=&amp;#39;,&amp;#39;chunk.user_id&amp;#39;)-&amp;gt;where(&amp;#39;user.parent_id&amp;#39;,$user-&amp;gt;parent_id)-&amp;gt;count(); </description>
    </item>
    
    <item>
      <title>Laravel Eloquent 模型使用</title>
      <link>https://blog.adminchao.com/posts/laravel-eloquent-%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 08 Apr 2018 11:21:42 +0000</pubDate>
      
      <guid>https://blog.adminchao.com/posts/laravel-eloquent-%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8/</guid>
      <description>前言    使用 Laravel Eloquent 可以非常方便的调用、管理数据。
用法    打开模型文件。用法如下:
class Seller extends Model { protected $table = &amp;#39;seller&amp;#39;; //定义表名  protected $hidden = [&amp;#39;corporate&amp;#39;, &amp;#39;business&amp;#39;, &amp;#39;province&amp;#39;, &amp;#39;city&amp;#39;, &amp;#39;county&amp;#39;, &amp;#39;address&amp;#39;]; //all()方法不会被返回的字段  protected $appends = [&amp;#39;nickname&amp;#39;, &amp;#39;mobile&amp;#39;]; //额外添加的返回信息 配合getColumnAttribute()方法得到。注意命名，如 nick_name 就是getNickNameAttribute()  protected $dates = [&amp;#39;create_time&amp;#39;]; //需要被转换成日期的属性 Carbon 类  public $timestamps = false; //保存时不自动生成 created_at 与 updated_at 字段  public function getNicknameAttribute() { return $this-&amp;gt;hasOne(&amp;#39;App\User&amp;#39;, &amp;#39;id&amp;#39;, &amp;#39;user_id&amp;#39;)-&amp;gt;value(&amp;#39;nickname&amp;#39;); // hasOne 一对一关系 id 是 to 表 user_id 是 本表  } public function getCreateTimeAttribute() { $value = $this-&amp;gt;attributes[&amp;#39;create_time&amp;#39;]; return $value ?</description>
    </item>
    
  </channel>
</rss>
