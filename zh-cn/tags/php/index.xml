<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on 郭超超的博客</title><link>https://blog.adminchao.com/zh-cn/tags/php/</link><description>Recent content in PHP on 郭超超的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Mar 2020 21:08:27 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/zh-cn/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Passport 个人令牌多用户登陆</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-passport-%E4%B8%AA%E4%BA%BA%E4%BB%A4%E7%89%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/</link><pubDate>Fri, 27 Mar 2020 21:08:27 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-passport-%E4%B8%AA%E4%BA%BA%E4%BB%A4%E7%89%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/</guid><description>前言 最近有个项目需要用到多用户表系统认证，对于 Token 的发放和鉴权，使用了 Passport 来实现 API 授权认证，但是 Passport 对于多用户表登陆实现还是比较难的，在网上到的一些多用户表登陆也都是用 GuzzleHttp 携带额外参数来实现的，不太满足我的需求。经过了一段时期的摸索，终于实现了 Passport 通过个人令牌来多用户登陆。
实现 Laravel 版本 6.0
安装 1 composer require laravel/passport 导出默认迁移文件 1 php artisan vendor:publish --tag=passport-migrations 运行该命令会在 \app\database\migrations\ 生成
Date_create_oauth_auth_codes_table.php Date_create_oauth_access_tokens_table.php Date_create_oauth_refresh_tokens_table.php Date_create_oauth_clients_table.php Date_create_oauth_personal_access_clients_table.php 五个数据库迁移文件，其中 Date_create_oauth_access_tokens_table 是用来记录发放成功的 Token 的。我们需要拷贝一个这个表用来建立另一个用户表的 Token 记录。
建立自定义 access_token 表 1 php artisan make:migration create_oauth_other_tokens --create=oauth_other_tokens 生成 Date_create_oauth_other_tokens 迁移文件。</description></item><item><title>Laravel Throttle 中间件接口形式</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</link><pubDate>Thu, 25 Jul 2019 18:33:53 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</guid><description>前言 Laravel 自带请求频率限制中间件,但是这个中间件返回的并不是信息,在日常工作总可能需要以接口的形式返回
步骤 生成中间件文件 1 php artisan make:middleware ThrottleRequests 拷贝代码到 app\Http\Middleware\ThrottleRequests.phpamp;lt;?</description></item><item><title>Laravel 使用WorkerMan(GateWay)</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-%E4%BD%BF%E7%94%A8workerman-gateway/</link><pubDate>Mon, 22 Jul 2019 16:30:53 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-%E4%BD%BF%E7%94%A8workerman-gateway/</guid><description>前言 记录在 Laravel 中使用 WorkerMan 或 GateWay 过程。
开始 安装 1 composer require workerman/gateway-worker 创建命令行 使用 artisan 创建一个命令行工具来启动 WorkerMan 因为 WorkerMan 只能在命令行中启动。
1 php artisan make:command WorkerMan 更改 /app/Console/Commands/WorkerMan.php 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 &amp;lt;?</description></item><item><title>Guzzle 基础用法</title><link>https://blog.adminchao.com/zh-cn/posts/guzzle-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link><pubDate>Mon, 17 Jun 2019 23:51:47 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/guzzle-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid><description>安装 1 composer require guzzlehttp/guzzle:~6.0 使用 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;?php use GuzzleHttp\Client; $client = new Client(); $api = &amp;#39;http://www.test.com/api/register&amp;#39;; $request_data = [&amp;#39;username&amp;#39;=&amp;gt;&amp;#39;111&amp;#39;,&amp;#39;password&amp;#39;=&amp;gt;&amp;#39;222&amp;#39;]; $sign = md5(&amp;#39;key&amp;#39;); $response = $client-&amp;gt;request(&amp;#39;POST&amp;#39;,$api,[&amp;#39;form_params&amp;#39;=&amp;gt;$request_data,&amp;#39;headers&amp;#39;=&amp;gt;[&amp;#39;Sign&amp;#39;=&amp;gt;$sign]]); $res_string = $response-&amp;gt;getBody()-&amp;gt;getContents(); $res_data = json_decode($res_string,true); var_dump($res_data); 对请求的封装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;lt;?</description></item><item><title>红包类</title><link>https://blog.adminchao.com/zh-cn/posts/%E7%BA%A2%E5%8C%85%E7%B1%BB/</link><pubDate>Sat, 16 Mar 2019 10:39:09 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/%E7%BA%A2%E5%8C%85%E7%B1%BB/</guid><description>前言 照搬了别人写的红包类，感觉挺好用。原文地址在注释里。特此记录
代码amp;lt;?</description></item><item><title>抽奖算法</title><link>https://blog.adminchao.com/zh-cn/posts/%E6%8A%BD%E5%A5%96%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 13 Jan 2019 18:08:37 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/%E6%8A%BD%E5%A5%96%E7%AE%97%E6%B3%95/</guid><description>上码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 &amp;lt;?php namespace App\Utils; class PROBABILITY { //chance为抽到概率，数值越小，概率越小 // $arr = [ // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;1000元手机&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;1&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;100元代金券&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;10&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;10元代金券&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;100&amp;#39;], // [&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;谢谢参与&amp;#39;,&amp;#39;chance&amp;#39;=&amp;gt;&amp;#39;700&amp;#39;], // ]; /** * 抽奖概率算法 * @param array $prizeArr 奖品数组 * @param string $index 概率键名 * @return mixed 抽到的奖品 */ public static function lottery_raffle($prizeArr,$index=&amp;#39;chance&amp;#39;) { $result = &amp;#39;&amp;#39;; //数组设为集合 $prize = collect($prizeArr); $randArr = $prize-&amp;gt;pluck($index)-&amp;gt;toArray(); //概率数组的总概率精度 $proSum = array_sum($randArr); //概率数组循环 foreach ($randArr as $key =&amp;gt; $val) { //生成随机数-从1到概率和生成一个随机送 $randNum = mt_rand(1, $proSum); //命中-如果随机送小于此次概率值 if ($randNum &amp;lt;= $val) { // echo &amp;#39;yes:&amp;#39;.</description></item><item><title>扫描 PHP 危险文件脚本</title><link>https://blog.adminchao.com/zh-cn/posts/%E6%89%AB%E6%8F%8Fphp%E5%8D%B1%E9%99%A9%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC/</link><pubDate>Sat, 12 Jan 2019 13:30:20 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/%E6%89%AB%E6%8F%8Fphp%E5%8D%B1%E9%99%A9%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC/</guid><description>上码 Laravel php artisan make:command ScanHorse:
amp;lt;?</description></item><item><title>Laravel Eloquent 返回结果优化</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</link><pubDate>Thu, 10 Jan 2019 15:29:08 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</guid><description>前言 我们都知道在模型中使用 appends 属性来构建访问器使得返回结果添加一些字段信息，但是这样的话有一个坏处，就是所有这个模型的返回结果都会有这些字段信息，如果接口中规定了严格的返回信息字段，这样就不合适了。
能不能有好的方法动态的显示或隐藏这些字段信息呢？
答案是肯定的。
动态显示 在接口中临时显示 首先在 Model 中构建访问器 1 2 3 public function getUsernameAttribute(){ return $this-&amp;gt;hasOne(&amp;#39;App\User&amp;#39;,&amp;#39;id&amp;#39;,&amp;#39;user_id&amp;#39;)-&amp;gt;value(&amp;#39;username&amp;#39;); } Model 不建立 appends 属性 单条记录 1 2 3 4 5 public function getUserInfo(Request $request){ $id = $request-&amp;gt;get(&amp;#39;id&amp;#39;,null); $result = User::find($id)-&amp;gt;append(&amp;#39;username&amp;#39;); return response()-&amp;gt;json($result); } 多条记录 1 2 3 4 5 6 7 8 9 10 public function getUsers(Request $request){ $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $results = User::orderBy(&amp;#39;id&amp;#39;,&amp;#39;desc&amp;#39;) -&amp;gt;paginate($limit) -&amp;gt;transform(function($item,$key){ $item-&amp;gt;append(&amp;#39;username&amp;#39;); return $item; //如果不 return 出去返回的是 null }); return response()-&amp;gt;json($results); } 如果不想用 append 方法的关联关系可以这样用 或者报 Method items does not exist.</description></item><item><title>独立使用 Eloquent</title><link>https://blog.adminchao.com/zh-cn/posts/%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8-eloquent/</link><pubDate>Wed, 04 Jul 2018 14:14:22 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8-eloquent/</guid><description>前言 Laravel 的 Eloquent 是一个很棒的ORM，Eloquent 是独立的模块，我们也可以在自己的项目里通过composer来使用Eloquent，本文就详细讲解如何在自己的项目集成 Eloquent。
安装 在项目目录下执行
1 composer require illuminate/database:^5.0 或直接在 composer.json 文件里添加:
1 2 3 4 5 6 7 8 9 10 11 12 { &amp;#34;require&amp;#34;: { &amp;#34;illuminate/database&amp;#34;: &amp;#34;^5.0&amp;#34;, &amp;#34;illuminate/pagination&amp;#34;: &amp;#34;^5.0&amp;#34; }, &amp;#34;repositories&amp;#34;: { &amp;#34;packagist&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;composer&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://packagist.phpcomposer.com&amp;#34; //中国镜像站 } } } 这样 Eloquent 就安装好了。</description></item><item><title>Laravel overtrue/wechat 微信用法</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-overtrue-wechat-%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%B3%95/</link><pubDate>Fri, 08 Jun 2018 12:51:35 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-overtrue-wechat-%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%B3%95/</guid><description>网页授权登陆中间件 创建 app/Http/Middleware/WechatAuth.php 中间件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 public function handle($request, Closure $next, $account = &amp;#39;default&amp;#39;, $scopes = null) { // $account 与 $scopes 写反的情况 if (is_array($scopes) || (\is_string($account) &amp;amp;&amp;amp; str_is(&amp;#39;snsapi_*&amp;#39;, $account))) { list($account, $scopes) = [$scopes, $account]; $account || $account = &amp;#39;default&amp;#39;; } $isNewSession = false; $sessionKey = \sprintf(&amp;#39;user_id&amp;#39;, $account); $config = config(\sprintf(&amp;#39;wechat.</description></item><item><title>Laravel 七牛云 layui 实现上传图片</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-%E4%B8%83%E7%89%9B%E4%BA%91-layui-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</link><pubDate>Fri, 08 Jun 2018 12:47:33 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-%E4%B8%83%E7%89%9B%E4%BA%91-layui-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</guid><description>安装 1 composer require qiniu/php-sdk 使用 PHP 返回上传 token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php namespace App\Http\Controllers\Admin; use App\Setting; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Qiniu\Auth; class DefaultController extends Controller { public function upload(){ $accessKey = Setting::getValueByKey(&amp;#39;qn_accessKey&amp;#39;); $secretKey = Setting::getValueByKey(&amp;#39;qn_secretKey&amp;#39;); $bucket = Setting::getValueByKey(&amp;#39;qn_bucket_static&amp;#39;); $baseUrl = Setting::getValueByKey(&amp;#39;qn_static_url&amp;#39;); //构建鉴权对象 $auth = new Auth($accessKey,$secretKey); //生成上传 token $token = $auth-&amp;gt;uploadToken($bucket); return $token; } } layui 携带 token 请求七牛云上传接口 layui HTML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;缩略图&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;thum&amp;#34;&amp;gt;上传图片&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;thum_img&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;详细图&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;imgs&amp;#34;&amp;gt; 上传 &amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;imgs_list&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; layui JS 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 function uploadInsts(elem,multiple,number,imgDiv){ if(multiple == null){ multiple = false; } if(number == null){ number = 0; } layui.</description></item><item><title>Laravel Excel 用法</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-excel-%E7%94%A8%E6%B3%95/</link><pubDate>Fri, 08 Jun 2018 12:44:33 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-excel-%E7%94%A8%E6%B3%95/</guid><description>Laravel-Excel 插件用法 安装 composer 安装 1 composer require &amp;#34;maatwebsite/excel:~2.1.0&amp;#34; 安装完成后，修改 config/app.php 在 providers 数组内追加如下内容 1 Maatwebsite\Excel\ExcelServiceProvider::class, 同时在 aliases 数组内追加如下内容: 1 &amp;#39;Excel&amp;#39; =&amp;gt; Maatwebsite\Excel\Facades\Excel::class, 生成配置文件 config/excel.php : 1 php artisan vendor:publish --provider=&amp;#34;Maatwebsite\Excel\ExcelServiceProvider&amp;#34; 用法 解析 Excel 文件 1 2 3 ini_set (&amp;#39;memory_limit&amp;#39;, &amp;#39;1024M&amp;#39;); $data = Excel::load(&amp;#39;excel.</description></item><item><title>Laravel ElasticSearch 插件</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-elasticsearch-%E6%8F%92%E4%BB%B6/</link><pubDate>Fri, 08 Jun 2018 12:43:00 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-elasticsearch-%E6%8F%92%E4%BB%B6/</guid><description>ElasticSearch 问题及用法 出现 index.max_result_window 报错的解决办法 1 curl -XPUT &amp;#34;http://localhost:9200/my_index/_settings&amp;#34; -d &amp;#39;{ &amp;#34;index&amp;#34; : { &amp;#34;max_result_window&amp;#34; : 100000000 } }&amp;#39; 搜索封装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static function SearchAccountLogEs($must = array(),$must_not = array(),$should = array(),$aggs = array(),$size = 10,$page = 1,$sort = array(),$debug = false){ $index = Config::get(&amp;#39;elasticsearch.</description></item><item><title>Laravel Eloquent 括号查询</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-eloquent-%E6%8B%AC%E5%8F%B7%E6%9F%A5%E8%AF%A2/</link><pubDate>Fri, 08 Jun 2018 12:36:54 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-eloquent-%E6%8B%AC%E5%8F%B7%E6%9F%A5%E8%AF%A2/</guid><description>相当于 select * from queue_second_sold where status=0 and (buy_user_id = 341 or (sell_user_id = 341 and buy_user_id != 0)) order by id desc,用法如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * 交易大厅-定向交易 * @param Request $request * @return \Illuminate\Http\JsonResponse */ public function soldList(Request $request){ $type = $request-&amp;gt;get(&amp;#39;type&amp;#39;,0); //交易大厅 $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $user = User::getUserInfo(); if($type == 1){ //定向交易 $results = QueueSecondSold::where(&amp;#39;status&amp;#39;,0) -&amp;gt;where(function($query) use ($user){ $query-&amp;gt;where(&amp;#39;sell_user_id&amp;#39;,$user-&amp;gt;id) -&amp;gt;where(&amp;#39;buy_user_id&amp;#39;,&amp;#39;!</description></item><item><title>树状分类</title><link>https://blog.adminchao.com/zh-cn/posts/%E6%A0%91%E7%8A%B6%E5%88%86%E7%B1%BB/</link><pubDate>Fri, 08 Jun 2018 12:33:49 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/%E6%A0%91%E7%8A%B6%E5%88%86%E7%B1%BB/</guid><description>一个树状分类的函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public static function tree($data,$pid=0,$level=0){ $results = array(); foreach ($data as $value){ // 递归点 如果当前记录的父 id 等于传入的父 id ，说明这个记录是传入父 id 的子级 if($value[&amp;#39;p_id&amp;#39;] == $pid){ $value[&amp;#39;level&amp;#39;] = $level; //递归调用，获得子级下的子级 $value[&amp;#39;children&amp;#39;] = self::tree($data,$value[&amp;#39;id&amp;#39;],$level + 1); //push把以上结果赋给返回数据 $results[] = $value; } //递归出口：遍历完成。 } //返回结果集 return $results; }</description></item><item><title>Laravel 全局作用域</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Fri, 08 Jun 2018 11:41:08 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>前言 全局作用域是用来全局添加执行约束的，添加过后涉及到的模型操作全部添加此约束。如：原 select * from user 添加过后变为 select * from user where is_delete = 0
用法 建立 App/Scopes/SiteScope.php ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;?php namespace App\Scopes; use App\Site; use Illuminate\Database\Eloquent\ScopeInterface; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\Builder; class SiteScope implements ScopeInterface{ public function apply(Builder $builder, Model $model) { $site = Site::getSiteId(); return $builder-&amp;gt;where(&amp;#39;site_id&amp;#39;, $site); } public function remove(Builder $builder, Model $model) //必须有remove { $column = $model-&amp;gt;getQualifiedDeletedAtColumn(); $query = $builder-&amp;gt;getQuery(); foreach ((array) $query-&amp;gt;wheres as $key =&amp;gt; $where) { // If the where clause is a soft delete date constraint, we will remove it from // the query and reset the keys on the wheres.</description></item><item><title>Laravel 生成测试数据</title><link>https://blog.adminchao.com/zh-cn/posts/laravel-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 08 Mar 2018 11:14:46 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/laravel-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</guid><description>前言 使用 Laravel Faker 生成测试数据，很方便测试调试。
用法 打开 app/database/factories/ModelFactory.php 编辑如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 $factory-&amp;gt;define(App\User::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //中文包 return [ &amp;#39;openid&amp;#39; =&amp;gt; str_random(10), &amp;#39;nickname&amp;#39; =&amp;gt; $faker-&amp;gt;name, //中文姓名 &amp;#39;mobile&amp;#39; =&amp;gt; $faker-&amp;gt;phoneNumber, &amp;#39;avatar&amp;#39; =&amp;gt; $faker-&amp;gt;imageUrl(), //图片URL地址 &amp;#39;integral&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(3), //随机3位整型(0-999) &amp;#39;balance&amp;#39; =&amp;gt; $faker-&amp;gt;randomFloat(2, 0, 10000), //随机浮点数,2位小数点,最小0，最大10000 &amp;#39;birthday&amp;#39; =&amp;gt; $faker-&amp;gt;date(), //日期 &amp;#39;created_time&amp;#39; =&amp;gt; $faker-&amp;gt;unixTime(), //unix时间戳 &amp;#39;password&amp;#39; =&amp;gt; App\User::generatePassword(&amp;#39;haha123&amp;#39;), //可用模型方法生成数据 ]; }); $factory-&amp;gt;define(App\Product::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //用模型生成要关联随机的数组 $seller = App\Seller::where(&amp;#39;status&amp;#39;, 1)-&amp;gt;get()-&amp;gt;toArray(); foreach ($seller as $value) { $row[] = $value[&amp;#39;id&amp;#39;]; } return [ &amp;#39;product_no&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(8), &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;【测试商品】&amp;#39; .</description></item><item><title>rest API 实例教程之 token 生成</title><link>https://blog.adminchao.com/zh-cn/posts/rest-api-%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B%E4%B9%8B-token-%E7%94%9F%E6%88%90/</link><pubDate>Wed, 21 Jun 2017 16:42:09 +0000</pubDate><guid>https://blog.adminchao.com/zh-cn/posts/rest-api-%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B%E4%B9%8B-token-%E7%94%9F%E6%88%90/</guid><description>&lt;h2 id="项目需求">
项目需求
&lt;a class="heading-link" href="#%e9%a1%b9%e7%9b%ae%e9%9c%80%e6%b1%82">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>  实现登陆功能，获取 token&lt;/p>
&lt;p>  &lt;strong>HttpMethod: Post&lt;/strong>&lt;br>
  &lt;strong>URI: /token&lt;/strong>&lt;/p>
&lt;p>  &lt;strong>Request Header&lt;/strong>&lt;br>
  &lt;strong>Content-Type: application/x-www-form-urlencoded&lt;/strong>&lt;/p></description></item></channel></rss>