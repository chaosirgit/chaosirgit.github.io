<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on 郭超超的博客</title><link>https://blog.ethankuo.info/zh-cn/categories/laravel/</link><description>Recent content in Laravel on 郭超超的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Mar 2020 21:08:27 +0000</lastBuildDate><atom:link href="https://blog.ethankuo.info/zh-cn/categories/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Passport 个人令牌多用户登陆</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-passport-%E4%B8%AA%E4%BA%BA%E4%BB%A4%E7%89%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/</link><pubDate>Fri, 27 Mar 2020 21:08:27 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-passport-%E4%B8%AA%E4%BA%BA%E4%BB%A4%E7%89%8C%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/</guid><description>前言 最近有个项目需要用到多用户表系统认证，对于 Token 的发放和鉴权，使用了 Passport 来实现 API 授权认证，但是 Passport 对于多用户表登陆实现还是比较难的，在网上到的一些多用户表登陆也都是用 GuzzleHttp 携带额外参数来实现的，不太满足我的需求。经过了一段时期的摸索，终于实现了 Passport 通过个人令牌来多用户登陆。
实现 Laravel 版本 6.0
安装 1 composer require laravel/passport 导出默认迁移文件 1 php artisan vendor:publish --tag=passport-migrations 运行该命令会在 \app\database\migrations\ 生成
Date_create_oauth_auth_codes_table.php Date_create_oauth_access_tokens_table.php Date_create_oauth_refresh_tokens_table.php Date_create_oauth_clients_table.php Date_create_oauth_personal_access_clients_table.php 五个数据库迁移文件，其中 Date_create_oauth_access_tokens_table 是用来记录发放成功的 Token 的。我们需要拷贝一个这个表用来建立另一个用户表的 Token 记录。
建立自定义 access_token 表 1 php artisan make:migration create_oauth_other_tokens --create=oauth_other_tokens 生成 Date_create_oauth_other_tokens 迁移文件。
复制 Date_create_oauth_access_tokens_table 文件内容到 Date_create_oauth_other_tokens
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &amp;lt;?</description></item><item><title>Guzzle 基础用法</title><link>https://blog.ethankuo.info/zh-cn/posts/guzzle-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link><pubDate>Mon, 17 Jun 2019 23:51:47 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/guzzle-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid><description>安装 1 composer require guzzlehttp/guzzle:~6.0 使用 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;?php use GuzzleHttp\Client; $client = new Client(); $api = &amp;#39;http://www.test.com/api/register&amp;#39;; $request_data = [&amp;#39;username&amp;#39;=&amp;gt;&amp;#39;111&amp;#39;,&amp;#39;password&amp;#39;=&amp;gt;&amp;#39;222&amp;#39;]; $sign = md5(&amp;#39;key&amp;#39;); $response = $client-&amp;gt;request(&amp;#39;POST&amp;#39;,$api,[&amp;#39;form_params&amp;#39;=&amp;gt;$request_data,&amp;#39;headers&amp;#39;=&amp;gt;[&amp;#39;Sign&amp;#39;=&amp;gt;$sign]]); $res_string = $response-&amp;gt;getBody()-&amp;gt;getContents(); $res_data = json_decode($res_string,true); var_dump($res_data); 对请求的封装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;lt;?</description></item><item><title>Laravel 分组获取最新记录</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-%E5%88%86%E7%BB%84%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E8%AE%B0%E5%BD%95/</link><pubDate>Wed, 14 Nov 2018 14:35:10 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-%E5%88%86%E7%BB%84%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E8%AE%B0%E5%BD%95/</guid><description>前言 今天项目中需要根据分组查询最新记录的业务逻辑，想要使用 Eloquent 查询出来，做个记录。
实现 表内容 id name user_id value 1 项目1 61 测试内容1 2 项目2 61 测试内容2 3 项目3 61 测试内容3 4 项目1 61 测试内容123 原生 SQL 为: 1 select * from (select * from project where user_id = :user_id order by id desc) as a group by a.name order by id desc; Mysql5.7 查出来的结果为 id name user_id value 3 项目3 61 测试内容3 2 项目2 61 测试内容2 1 项目1 61 测试内容1 原因是 5.</description></item><item><title>Laravel 阿里云短信使用</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 31 Jul 2018 17:14:34 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E4%BD%BF%E7%94%A8/</guid><description>curder/laravel-aliyun-sms 安装 1 composer require curder/laravel-aliyun-sms 配置 在 Laravel 项目的 .env 文件中配置如下信息。
1 2 3 4 5 6 7 8 9 ALIYUN_SMS_ENABLE_HTTP_PROXY=false ALIYUN_SMS_HTTP_PROXY_IP=127.0.0.1 ALIYUN_SMS_HTTP_PROXY_PORT=8888 ALIYUN_SMS_REGION_ID=cn-hangzhou ALIYUN_SMS_AK=&amp;#34;&amp;#34; ALIYUN_SMS_AS=&amp;#34;&amp;#34; ALIYUN_SMS_SIGN_NAME=&amp;#34;&amp;#34; ALIYUN_SMS_VARIABLE=&amp;#34;&amp;#34; ALIYUN_SMS_CODE=&amp;#34;&amp;#34; 注册 ServiceProvide 在项目的 config/app.php 文件中 providers 数组中新增如下行：
1 Curder\LaravelAliyunSms\ServiceProvider::class, 生成配置文件 1 php artisan vendor:publish --provider=&amp;#34;Curder\LaravelAliyunSms\ServiceProvider&amp;#34; 生成的文件在 config/aliyunsms.php 可以前往修改
用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 &amp;lt;?</description></item><item><title>独立使用 Eloquent</title><link>https://blog.ethankuo.info/zh-cn/posts/%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8-eloquent/</link><pubDate>Wed, 04 Jul 2018 14:14:22 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8-eloquent/</guid><description>前言 Laravel 的 Eloquent 是一个很棒的ORM，Eloquent 是独立的模块，我们也可以在自己的项目里通过composer来使用Eloquent，本文就详细讲解如何在自己的项目集成 Eloquent。
安装 在项目目录下执行
1 composer require illuminate/database:^5.0 或直接在 composer.json 文件里添加:
1 2 3 4 5 6 7 8 9 10 11 12 { &amp;#34;require&amp;#34;: { &amp;#34;illuminate/database&amp;#34;: &amp;#34;^5.0&amp;#34;, &amp;#34;illuminate/pagination&amp;#34;: &amp;#34;^5.0&amp;#34; }, &amp;#34;repositories&amp;#34;: { &amp;#34;packagist&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;composer&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://packagist.phpcomposer.com&amp;#34; //中国镜像站 } } } 这样 Eloquent 就安装好了。
配置 在项目入口文件加入
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // 载入 composer 的 autoload 文件 require_once IA_ROOT .</description></item><item><title>Laravel overtrue/wechat 微信用法</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-overtrue-wechat-%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%B3%95/</link><pubDate>Fri, 08 Jun 2018 12:51:35 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-overtrue-wechat-%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%B3%95/</guid><description>网页授权登陆中间件 创建 app/Http/Middleware/WechatAuth.php 中间件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 public function handle($request, Closure $next, $account = &amp;#39;default&amp;#39;, $scopes = null) { // $account 与 $scopes 写反的情况 if (is_array($scopes) || (\is_string($account) &amp;amp;&amp;amp; str_is(&amp;#39;snsapi_*&amp;#39;, $account))) { list($account, $scopes) = [$scopes, $account]; $account || $account = &amp;#39;default&amp;#39;; } $isNewSession = false; $sessionKey = \sprintf(&amp;#39;user_id&amp;#39;, $account); $config = config(\sprintf(&amp;#39;wechat.</description></item><item><title>Laravel 七牛云 layui 实现上传图片</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-%E4%B8%83%E7%89%9B%E4%BA%91-layui-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</link><pubDate>Fri, 08 Jun 2018 12:47:33 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-%E4%B8%83%E7%89%9B%E4%BA%91-layui-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</guid><description>安装 1 composer require qiniu/php-sdk 使用 PHP 返回上传 token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php namespace App\Http\Controllers\Admin; use App\Setting; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Qiniu\Auth; class DefaultController extends Controller { public function upload(){ $accessKey = Setting::getValueByKey(&amp;#39;qn_accessKey&amp;#39;); $secretKey = Setting::getValueByKey(&amp;#39;qn_secretKey&amp;#39;); $bucket = Setting::getValueByKey(&amp;#39;qn_bucket_static&amp;#39;); $baseUrl = Setting::getValueByKey(&amp;#39;qn_static_url&amp;#39;); //构建鉴权对象 $auth = new Auth($accessKey,$secretKey); //生成上传 token $token = $auth-&amp;gt;uploadToken($bucket); return $token; } } layui 携带 token 请求七牛云上传接口 layui HTML 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;缩略图&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;thum&amp;#34;&amp;gt;上传图片&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;thum_img&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;详细图&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;imgs&amp;#34;&amp;gt; 上传 &amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;imgs_list&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; layui JS 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 function uploadInsts(elem,multiple,number,imgDiv){ if(multiple == null){ multiple = false; } if(number == null){ number = 0; } layui.</description></item><item><title>Laravel Excel 用法</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-excel-%E7%94%A8%E6%B3%95/</link><pubDate>Fri, 08 Jun 2018 12:44:33 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-excel-%E7%94%A8%E6%B3%95/</guid><description> Laravel-Excel 插件用法 安装 composer 安装 1 composer require &amp;#34;maatwebsite/excel:~2.1.0&amp;#34; 安装完成后，修改 config/app.php 在 providers 数组内追加如下内容 1 Maatwebsite\Excel\ExcelServiceProvider::class, 同时在 aliases 数组内追加如下内容: 1 &amp;#39;Excel&amp;#39; =&amp;gt; Maatwebsite\Excel\Facades\Excel::class, 生成配置文件 config/excel.php : 1 php artisan vendor:publish --provider=&amp;#34;Maatwebsite\Excel\ExcelServiceProvider&amp;#34; 用法 解析 Excel 文件 1 2 3 ini_set (&amp;#39;memory_limit&amp;#39;, &amp;#39;1024M&amp;#39;); $data = Excel::load(&amp;#39;excel.xlsx&amp;#39;,function ($reader){ },&amp;#39;UTF-8&amp;#39;)-&amp;gt;toArray(); 将数据导成 Excel 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 导出 Excel 并能直接在浏览器下载 # $export_file_name = 要生成的文件名 Excel::create($export_file_name, function ($excel) { $excel-&amp;gt;sheet(&amp;#39;Sheetname&amp;#39;, function ($sheet) { $sheet-&amp;gt;appendRow([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]); $sheet-&amp;gt;appendRow([&amp;#39;LiLei&amp;#39;, &amp;#39;22&amp;#39;]); $sheet-&amp;gt;appendRow([&amp;#39;HanMeimei&amp;#39;, &amp;#39;22&amp;#39;]); }); })-&amp;gt;download(&amp;#39;xls&amp;#39;); // 导出 Excel 并存储到指定目录 Excel::create($export_file_name, function ($excel) { $excel-&amp;gt;sheet(&amp;#39;Sheetname&amp;#39;, function ($sheet) { $sheet-&amp;gt;appendRow([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]); $sheet-&amp;gt;appendRow([&amp;#39;LiLei&amp;#39;, &amp;#39;22&amp;#39;]); $sheet-&amp;gt;appendRow([&amp;#39;HanMeimei&amp;#39;, &amp;#39;22&amp;#39;]); }); })-&amp;gt;store(&amp;#39;xls&amp;#39;, $path);</description></item><item><title>Laravel ElasticSearch 插件</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-elasticsearch-%E6%8F%92%E4%BB%B6/</link><pubDate>Fri, 08 Jun 2018 12:43:00 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-elasticsearch-%E6%8F%92%E4%BB%B6/</guid><description>ElasticSearch 问题及用法 出现 index.max_result_window 报错的解决办法 1 curl -XPUT &amp;#34;http://localhost:9200/my_index/_settings&amp;#34; -d &amp;#39;{ &amp;#34;index&amp;#34; : { &amp;#34;max_result_window&amp;#34; : 100000000 } }&amp;#39; 搜索封装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static function SearchAccountLogEs($must = array(),$must_not = array(),$should = array(),$aggs = array(),$size = 10,$page = 1,$sort = array(),$debug = false){ $index = Config::get(&amp;#39;elasticsearch.</description></item><item><title>Laravel Eloquent 括号查询</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-eloquent-%E6%8B%AC%E5%8F%B7%E6%9F%A5%E8%AF%A2/</link><pubDate>Fri, 08 Jun 2018 12:36:54 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-eloquent-%E6%8B%AC%E5%8F%B7%E6%9F%A5%E8%AF%A2/</guid><description>相当于 select * from queue_second_sold where status=0 and (buy_user_id = 341 or (sell_user_id = 341 and buy_user_id != 0)) order by id desc,用法如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * 交易大厅-定向交易 * @param Request $request * @return \Illuminate\Http\JsonResponse */ public function soldList(Request $request){ $type = $request-&amp;gt;get(&amp;#39;type&amp;#39;,0); //交易大厅 $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $user = User::getUserInfo(); if($type == 1){ //定向交易 $results = QueueSecondSold::where(&amp;#39;status&amp;#39;,0) -&amp;gt;where(function($query) use ($user){ $query-&amp;gt;where(&amp;#39;sell_user_id&amp;#39;,$user-&amp;gt;id) -&amp;gt;where(&amp;#39;buy_user_id&amp;#39;,&amp;#39;!</description></item><item><title>Laravel Paginate 分页</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-paginate-%E5%88%86%E9%A1%B5/</link><pubDate>Fri, 08 Jun 2018 11:56:23 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-paginate-%E5%88%86%E9%A1%B5/</guid><description> 前言 使用 Laravel Eloquent 的 paginate 方法会很容易对数据进行分页。非常好用！我太喜欢了。
使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //paginate 源码 public function paginate($perPage = 15, $columns = [&amp;#39;*&amp;#39;], $pageName = &amp;#39;page&amp;#39;, $page = null) { $page = $page ?: Paginator::resolveCurrentPage($pageName); $total = $this-&amp;gt;getCountForPagination($columns); $results = $total ? $this-&amp;gt;forPage($page, $perPage)-&amp;gt;get($columns) : collect(); return $this-&amp;gt;paginator($results, $total, $perPage, $page, [ &amp;#39;path&amp;#39; =&amp;gt; Paginator::resolveCurrentPath(), &amp;#39;pageName&amp;#39; =&amp;gt; $pageName, ]); } public function showApi(Request $request) { $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;); //$page = $request-&amp;gt;get(&amp;#39;page&amp;#39;); $results = Seller::paginate($limit); //无须接收 $page ,laravel 自动接收 //$results = Seller::forPage($page,$limit)-&amp;gt;get(); 或者用这种 //$results = Seller::paginate($limit,[&amp;#39;*&amp;#39;],&amp;#39;page&amp;#39;,5); //paginate 控制page return response()-&amp;gt;json([&amp;#39;code&amp;#39; =&amp;gt; 0, &amp;#39;data&amp;#39; =&amp;gt; $results-&amp;gt;items(), &amp;#39;count&amp;#39; =&amp;gt; $results-&amp;gt;total()]); }</description></item><item><title>Laravel 全局作用域</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Fri, 08 Jun 2018 11:41:08 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>前言 全局作用域是用来全局添加执行约束的，添加过后涉及到的模型操作全部添加此约束。如：原 select * from user 添加过后变为 select * from user where is_delete = 0
用法 建立 App/Scopes/SiteScope.php ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;?php namespace App\Scopes; use App\Site; use Illuminate\Database\Eloquent\ScopeInterface; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\Builder; class SiteScope implements ScopeInterface{ public function apply(Builder $builder, Model $model) { $site = Site::getSiteId(); return $builder-&amp;gt;where(&amp;#39;site_id&amp;#39;, $site); } public function remove(Builder $builder, Model $model) //必须有remove { $column = $model-&amp;gt;getQualifiedDeletedAtColumn(); $query = $builder-&amp;gt;getQuery(); foreach ((array) $query-&amp;gt;wheres as $key =&amp;gt; $where) { // If the where clause is a soft delete date constraint, we will remove it from // the query and reset the keys on the wheres.</description></item><item><title>Laravel 生成测试数据</title><link>https://blog.ethankuo.info/zh-cn/posts/laravel-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 08 Mar 2018 11:14:46 +0000</pubDate><guid>https://blog.ethankuo.info/zh-cn/posts/laravel-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</guid><description>前言 使用 Laravel Faker 生成测试数据，很方便测试调试。
用法 打开 app/database/factories/ModelFactory.php 编辑如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 $factory-&amp;gt;define(App\User::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //中文包 return [ &amp;#39;openid&amp;#39; =&amp;gt; str_random(10), &amp;#39;nickname&amp;#39; =&amp;gt; $faker-&amp;gt;name, //中文姓名 &amp;#39;mobile&amp;#39; =&amp;gt; $faker-&amp;gt;phoneNumber, &amp;#39;avatar&amp;#39; =&amp;gt; $faker-&amp;gt;imageUrl(), //图片URL地址 &amp;#39;integral&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(3), //随机3位整型(0-999) &amp;#39;balance&amp;#39; =&amp;gt; $faker-&amp;gt;randomFloat(2, 0, 10000), //随机浮点数,2位小数点,最小0，最大10000 &amp;#39;birthday&amp;#39; =&amp;gt; $faker-&amp;gt;date(), //日期 &amp;#39;created_time&amp;#39; =&amp;gt; $faker-&amp;gt;unixTime(), //unix时间戳 &amp;#39;password&amp;#39; =&amp;gt; App\User::generatePassword(&amp;#39;haha123&amp;#39;), //可用模型方法生成数据 ]; }); $factory-&amp;gt;define(App\Product::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //用模型生成要关联随机的数组 $seller = App\Seller::where(&amp;#39;status&amp;#39;, 1)-&amp;gt;get()-&amp;gt;toArray(); foreach ($seller as $value) { $row[] = $value[&amp;#39;id&amp;#39;]; } return [ &amp;#39;product_no&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(8), &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;【测试商品】&amp;#39; .</description></item></channel></rss>