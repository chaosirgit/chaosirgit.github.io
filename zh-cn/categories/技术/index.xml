<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 郭超超的博客</title>
    <link>http://chaosirgit.github.io/zh-cn/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 郭超超的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Jun 2021 23:31:29 +0000</lastBuildDate><atom:link href="http://chaosirgit.github.io/zh-cn/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laradock 安装 GRPC 扩展</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laradock-%E5%AE%89%E8%A3%85-grpc-%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 30 Jun 2021 23:31:29 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laradock-%E5%AE%89%E8%A3%85-grpc-%E6%89%A9%E5%B1%95/</guid>
      <description>前言    在 Laradock 环境下安装不常用的 PHP 扩展，不止用与 GRPC 扩展，其他依此类推即可
步骤    修改配置文件:    laradock/docker-compose.yml
在 workspace 配置参数段
1 2 3 4  workspace: build: context: ./workspace args:   添加
1  - INSTALL_PHPGRPC=${WORKSPACE_INSTALL_PHPGRPC}   修改启动配置文件    laradock/.env
增加两个配置项
1 2  PHP_FPM_INSTALL_PHPGRPC=true WORKSPACE_INSTALL_PHPGRPC=true   修改 PHP-FPM 配置文件    laradock/php-fpm/Dockerfile
1 2 3 4 5 6 7 8 9 10  ########################################################################### # php grpc extension ########################################################################### ARG INSTALL_PHPGRPC=false RUN if [ ${INSTALL_PHPGRPC} = true ]; then \  printf &amp;#34;\n&amp;#34; | pecl install -o -f grpc \  &amp;amp;&amp;amp; rm -rf /tmp/pear \  &amp;amp;&amp;amp; docker-php-ext-enable grpc \ ;fi   修改 WORKSPACE 配置文件    laradock/workspace/Dockerfile</description>
    </item>
    
    <item>
      <title>Docker 使用笔记</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/docker-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 20 Jul 2020 15:39:19 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/docker-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>前言    在 Docker 的学习及使用过程中作一些笔记。
命令    检查安装后的 Docker 版本
1 2 3 4  $ docker --version Docker version 19.03.8, build afacb8b $ docker-compose --version docker-compose version 1.25.5, build 8a1c60f6   尝试运行一个 Nginx 服务器：
1 2 3 4 5  $ docker run -d -p 80:80 --name webserver nginx # -p 参数指定 本机端口:容器端口 # -d 在后台运行容器 # --name 给容器设置别名 # 此时访问本地 http://localhost 出现 Welcome to Nginx   停止 Nginx 服务器并删除容器：</description>
    </item>
    
    <item>
      <title>Laravel Throttle 中间件接口形式</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Thu, 25 Jul 2019 18:33:53 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laravel-throttle-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%BD%A2%E5%BC%8F/</guid>
      <description>前言    Laravel 自带请求频率限制中间件,但是这个中间件返回的并不是信息,在日常工作总可能需要以接口的形式返回
步骤    生成中间件文件    1  php artisan make:middleware ThrottleRequests   拷贝代码到 app\Http\Middleware\ThrottleRequests.phpamp;lt;?</description>
    </item>
    
    <item>
      <title>Laravel 使用WorkerMan(GateWay)</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laravel-%E4%BD%BF%E7%94%A8workerman-gateway/</link>
      <pubDate>Mon, 22 Jul 2019 16:30:53 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laravel-%E4%BD%BF%E7%94%A8workerman-gateway/</guid>
      <description>前言    记录在 Laravel 中使用 WorkerMan 或 GateWay 过程。
开始    安装    1  composer require workerman/gateway-worker   创建命令行    使用 artisan 创建一个命令行工具来启动 WorkerMan 因为 WorkerMan 只能在命令行中启动。
1  php artisan make:command WorkerMan   更改 /app/Console/Commands/WorkerMan.php 文件    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122  &amp;lt;?</description>
    </item>
    
    <item>
      <title>百度编辑器多图上传改为七牛云</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0%E6%94%B9%E4%B8%BA%E4%B8%83%E7%89%9B%E4%BA%91/</link>
      <pubDate>Wed, 22 May 2019 13:00:10 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0%E6%94%B9%E4%B8%BA%E4%B8%83%E7%89%9B%E4%BA%91/</guid>
      <description>前言    修改百度编辑器多图上传为七牛云 百度编辑器版本为 1.4.3
开始    修改 ueditor/1.4.3/php/config.json 配置文件    1 2 3 4 5 6 7 8 9 10 11 12 13  { /* 上传图片配置项 */ &amp;#34;imageUrl&amp;#34;: &amp;#34;https://up-z2.qiniup.com/&amp;#34;, /* 七牛云上传接口 */ &amp;#34;imageActionName&amp;#34;: &amp;#34;uploadimage&amp;#34;, /* 执行上传图片的action名称 */ &amp;#34;imageFieldName&amp;#34;: &amp;#34;file&amp;#34;, /* 提交的图片表单名称 这里修改为file 七牛云接收参数名不是file报错 */ &amp;#34;imageMaxSize&amp;#34;: 5242880, /* 上传大小限制，单位B */ &amp;#34;imageAllowFiles&amp;#34;: [&amp;#34;.png&amp;#34;, &amp;#34;.jpg&amp;#34;, &amp;#34;.jpeg&amp;#34;, &amp;#34;.gif&amp;#34;, &amp;#34;.bmp&amp;#34;], /* 上传图片格式显示 */ &amp;#34;imageCompressEnable&amp;#34;: true, /* 是否压缩图片,默认是true */ &amp;#34;imageCompressBorder&amp;#34;: 1600, /* 图片压缩最长边限制 */ &amp;#34;imageInsertAlign&amp;#34;: &amp;#34;none&amp;#34;, /* 插入的图片浮动方式 */ &amp;#34;imageUrlPrefix&amp;#34;: &amp;#34;&amp;#34;, /* 图片访问路径前缀 */ &amp;#34;imagePathFormat&amp;#34;: &amp;#34;/upload/image/{yyyy}{mm}{dd}/{time}{rand:6}&amp;#34; /* 上传保存路径,可以自定义保存路径和文件名格式 */ }   修改 ueditor/1.</description>
    </item>
    
    <item>
      <title>红包类</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/%E7%BA%A2%E5%8C%85%E7%B1%BB/</link>
      <pubDate>Sat, 16 Mar 2019 10:39:09 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/%E7%BA%A2%E5%8C%85%E7%B1%BB/</guid>
      <description>前言    照搬了别人写的红包类，感觉挺好用。原文地址在注释里。特此记录
代码amp;lt;?</description>
    </item>
    
    <item>
      <title>Laravel Eloquent 返回结果优化</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 10 Jan 2019 15:29:08 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laravel-eloquent-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96/</guid>
      <description>前言    我们都知道在模型中使用 appends 属性来构建访问器使得返回结果添加一些字段信息，但是这样的话有一个坏处，就是所有这个模型的返回结果都会有这些字段信息，如果接口中规定了严格的返回信息字段，这样就不合适了。
能不能有好的方法动态的显示或隐藏这些字段信息呢？
答案是肯定的。
动态显示    在接口中临时显示    首先在 Model 中构建访问器    1 2 3  public function getUsernameAttribute(){ return $this-&amp;gt;hasOne(&amp;#39;App\User&amp;#39;,&amp;#39;id&amp;#39;,&amp;#39;user_id&amp;#39;)-&amp;gt;value(&amp;#39;username&amp;#39;); }   Model 不建立 appends 属性    单条记录    1 2 3 4 5  public function getUserInfo(Request $request){ $id = $request-&amp;gt;get(&amp;#39;id&amp;#39;,null); $result = User::find($id)-&amp;gt;append(&amp;#39;username&amp;#39;); return response()-&amp;gt;json($result); }   多条记录    1 2 3 4 5 6 7 8 9 10  public function getUsers(Request $request){ $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $results = User::orderBy(&amp;#39;id&amp;#39;,&amp;#39;desc&amp;#39;) -&amp;gt;paginate($limit) -&amp;gt;transform(function($item,$key){ $item-&amp;gt;append(&amp;#39;username&amp;#39;); return $item; //如果不 return 出去返回的是 null  }); return response()-&amp;gt;json($results); }   如果不想用 append 方法的关联关系可以这样用 或者报 Method items does not exist.</description>
    </item>
    
    <item>
      <title>Laravel Artisan 后台调用</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laravel-artisan-%E5%90%8E%E5%8F%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 15 Oct 2018 10:04:39 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laravel-artisan-%E5%90%8E%E5%8F%B0%E8%B0%83%E7%94%A8/</guid>
      <description>前言    在项目中需要以编程方式后台执行脚本，以官方 Artisan::call() 调用的话，如果脚本时间过长，会进程中断，导致脚本执行不成功，所以需要后台挂起执行。
Artisan 命令行工具    请参照官方文档
以编程方式调用    1 2 3 4 5  &amp;lt;?php use Illuminate\Support\Facades\Artisan; Artisan::call(&amp;#39;command&amp;#39;,[&amp;#39;id&amp;#39;=&amp;gt;1]);   这里注意，如果在代码有事务，Artisan::call() 需要在 commit 或 rollback 后调用。
后台调用    直接上代码
1 2 3 4 5 6 7  &amp;lt;?php use Symfony\Component\Process\Process; $process = new Process(&amp;#39;nohup php artisan command &amp;#39;.$id .&amp;#39; &amp;gt;/var/www/html/crowd/nohup.log 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;,&amp;#39;path/to/artisan&amp;#39;); //第一个参数是运行的命令,命令方式跟 Linux 一致，第二个参数是可以执行此条命令的路径  $process-&amp;gt;start(); ?&amp;gt;   </description>
    </item>
    
    <item>
      <title>Laravel Eloquent 高级</title>
      <link>http://chaosirgit.github.io/zh-cn/posts/laravel-eloquent-%E9%AB%98%E7%BA%A7/</link>
      <pubDate>Wed, 22 Aug 2018 11:02:10 +0000</pubDate>
      
      <guid>http://chaosirgit.github.io/zh-cn/posts/laravel-eloquent-%E9%AB%98%E7%BA%A7/</guid>
      <description>前言    在使用 Laravel Eloquent 模型时，深刻体会到什么是优雅！虽然在业务逻辑中可以使用模型链式调用DB模型的操作方法来解决，但是始终少了优雅！这里专门记录去 DB 模型的操作方法，使代码优雅化。
目标    leftJoin where    目标 SQL    1  select * from user_second left join user on user_second.user_id = user.id where user.status = 1   解决方案    1 2  &amp;lt;?php UserSecond::leftJoin(&amp;#39;user&amp;#39;,&amp;#39;user_second.user_id&amp;#39;,&amp;#39;=&amp;#39;,&amp;#39;user.id&amp;#39;)-&amp;gt;where(&amp;#39;user.status&amp;#39;,1)-&amp;gt;get();   但是这样的缺点在于
 得到的结果两个表的字段如果相同，右表会覆盖左表的值。 得到的结果不能使用模型精确控制。  1 2 3 4 5 6 7 8 9  { &amp;#34;id&amp;#34;: 11, //其实左表也就是`user_second`表的 id 为 9 这里被 `user` 表的 id 覆盖了  &amp;#34;user_id&amp;#34;: 11, //这里是 `user_second` 表的 `user_id`  &amp;#34;enlist_currency&amp;#34;: &amp;#34;256.</description>
    </item>
    
  </channel>
</rss>
