<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on Ethan Kuo Blog</title><link>https://blog.adminchao.com/categories/laravel/</link><description>Recent content in Laravel on Ethan Kuo Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Mar 2020 21:08:27 +0000</lastBuildDate><atom:link href="https://blog.adminchao.com/categories/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Passport Personal Token Multi-User Login</title><link>https://blog.adminchao.com/posts/laravel-passport-personal-token-multi-user-login/</link><pubDate>Fri, 27 Mar 2020 21:08:27 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-passport-personal-token-multi-user-login/</guid><description>Preface Recently a project needs to use multi-user table system authentication, using Passport to achieve for Token issuance and authentication, but for multi-user table login Passport is still difficult to achieve, see some multi-user table login is also used GuzzleHttp carry additional parameters to achieve, does not meet my needs. After a period of exploration, I finally implemented Passport through the personal token multi-user table login.
Step Laravel Version 6.0</description></item><item><title>Guzzle Basic Usage</title><link>https://blog.adminchao.com/posts/guzzle-basic-usage/</link><pubDate>Mon, 17 Jun 2019 23:51:47 +0000</pubDate><guid>https://blog.adminchao.com/posts/guzzle-basic-usage/</guid><description>Installation 1 composer require guzzlehttp/guzzle:~6.0 Use 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;?php use GuzzleHttp\Client; $client = new Client(); $api = &amp;#39;http://www.test.com/api/register&amp;#39;; $request_data = [&amp;#39;username&amp;#39;=&amp;gt;&amp;#39;111&amp;#39;,&amp;#39;password&amp;#39;=&amp;gt;&amp;#39;222&amp;#39;]; $sign = md5(&amp;#39;key&amp;#39;); $response = $client-&amp;gt;request(&amp;#39;POST&amp;#39;,$api,[&amp;#39;form_params&amp;#39;=&amp;gt;$request_data,&amp;#39;headers&amp;#39;=&amp;gt;[&amp;#39;Sign&amp;#39;=&amp;gt;$sign]]); $res_string = $response-&amp;gt;getBody()-&amp;gt;getContents(); $res_data = json_decode($res_string,true); var_dump($res_data); Encapsulation of requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;lt;?</description></item><item><title>Laravel Get The Latest Records In Groups</title><link>https://blog.adminchao.com/posts/laravel-get-the-latest-records-in-groups/</link><pubDate>Wed, 14 Nov 2018 14:35:10 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-get-the-latest-records-in-groups/</guid><description>Preface Today&amp;rsquo;s project requires the business logic of querying the latest records based on grouping, and I want to use Eloquent to query out and make a record.
Realization Table Contents id name user_id value 1 Project 1 61 test 1 2 Project 2 61 test 2 3 Project 3 61 test 3 4 Project 1 61 test 123 Raw SQL is: 1 select * from (select * from project where user_id = :user_id order by id desc) as a group by a.</description></item><item><title>Laravel AliCloud SMS Usage</title><link>https://blog.adminchao.com/posts/laravel-alicloud-sms-usage/</link><pubDate>Tue, 31 Jul 2018 17:14:34 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-alicloud-sms-usage/</guid><description>curder/laravel-aliyun-sms Installation 1 composer require curder/laravel-aliyun-sms Configuration Configure the following information in the .env file of the Laravel project.
1 2 3 4 5 6 7 8 9 ALIYUN_SMS_ENABLE_HTTP_PROXY=false ALIYUN_SMS_HTTP_PROXY_IP=127.0.0.1 ALIYUN_SMS_HTTP_PROXY_PORT=8888 ALIYUN_SMS_REGION_ID=cn-hangzhou ALIYUN_SMS_AK=&amp;#34;&amp;#34; ALIYUN_SMS_AS=&amp;#34;&amp;#34; ALIYUN_SMS_SIGN_NAME=&amp;#34;&amp;#34; ALIYUN_SMS_VARIABLE=&amp;#34;&amp;#34; ALIYUN_SMS_CODE=&amp;#34;&amp;#34; Register ServiceProvide Add the following line to the providers array in the project&amp;rsquo;s config/app.php file.
1 Curder\LaravelAliyunSms\ServiceProvider::class, Generate configuration file 1 php artisan vendor:publish --provider=&amp;#34;Curder\LaravelAliyunSms\ServiceProvider&amp;#34; The generated file is in config/aliyunsms.</description></item><item><title>Standalone Use Of Eloquent</title><link>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</link><pubDate>Wed, 04 Jul 2018 14:14:22 +0000</pubDate><guid>https://blog.adminchao.com/posts/standalone-use-of-eloquent/</guid><description>Preface Laravel&amp;rsquo;s Eloquent is a great ORM, Eloquent is a standalone module, we can also use Eloquent in our own projects through composer, this article will explain in detail how to integrate Eloquent in your own projects.
Installation In the project directory, execute
1 composer require illuminate/database:^5.0 Or add it directly to the composer.json file:
1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;require&amp;#34;: { &amp;#34;illuminate/database&amp;#34;: &amp;#34;^5.</description></item><item><title>Laravel overtrue/wechat Usage</title><link>https://blog.adminchao.com/posts/laravel-overtrue-wechat-usage/</link><pubDate>Fri, 08 Jun 2018 12:51:35 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-overtrue-wechat-usage/</guid><description>Web Authorization Login Middleware Create app/Http/Middleware/WechatAuth.php middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 public function handle($request, Closure $next, $account = &amp;#39;default&amp;#39;, $scopes = null) { // The case where $account and $scopes are written backwards if (is_array($scopes) || (\is_string($account) &amp;amp;&amp;amp; str_is(&amp;#39;snsapi_*&amp;#39;, $account))) { list($account, $scopes) = [$scopes, $account]; $account || $account = &amp;#39;default&amp;#39;; } $isNewSession = false; $sessionKey = \sprintf(&amp;#39;user_id&amp;#39;, $account); $config = config(\sprintf(&amp;#39;wechat.</description></item><item><title>Laravel Qiniu Layui Upload Image</title><link>https://blog.adminchao.com/posts/laravel-qiniu-layui-upload-image/</link><pubDate>Fri, 08 Jun 2018 12:47:33 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-qiniu-layui-upload-image/</guid><description>Installation 1 composer require qiniu/php-sdk Usage PHP returns the upload token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php namespace App\Http\Controllers\Admin; use App\Setting; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Qiniu\Auth; class DefaultController extends Controller { public function upload(){ $accessKey = Setting::getValueByKey(&amp;#39;qn_accessKey&amp;#39;); $secretKey = Setting::getValueByKey(&amp;#39;qn_secretKey&amp;#39;); $bucket = Setting::getValueByKey(&amp;#39;qn_bucket_static&amp;#39;); $baseUrl = Setting::getValueByKey(&amp;#39;qn_static_url&amp;#39;); //Build forensic objects $auth = new Auth($accessKey,$secretKey); //generate upload token $token = $auth-&amp;gt;uploadToken($bucket); return $token; } } layui carry token to request seven cows cloud upload interface layui HTML code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;Thumbnail&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;thum&amp;#34;&amp;gt;Upload image&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;thum_img&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;layui-form-item&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;layui-form-label&amp;#34; for=&amp;#34;fileInput&amp;#34;&amp;gt;Detailed image&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;layui-input-block&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;layui-btn&amp;#34; id=&amp;#34;imgs&amp;#34;&amp;gt; Upload &amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;layui-upload-list&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;imgs_list&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; layui JS code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 function uploadInsts(elem,multiple,number,imgDiv){ if(multiple == null){ multiple = false; } if(number == null){ number = 0; } layui.</description></item><item><title>Laravel Excel Usage</title><link>https://blog.adminchao.com/posts/laravel-excel-usage/</link><pubDate>Fri, 08 Jun 2018 12:44:33 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-excel-usage/</guid><description>Laravel-Excel Plugin Usage Installation composer installation 1 composer require &amp;#34;maatwebsite/excel:~2.1.0&amp;#34; After installation, modify config/app.php and append the following to the providers array 1 Maatwebsite\Excel\ExcelServiceProvider::class, Also append the following to the aliases array: 1 &amp;#39;Excel&amp;#39; =&amp;gt; Maatwebsite\Excel\Facades\Excel::class, Generate configuration file config/excel.php : 1 php artisan vendor:publish --provider=&amp;#34;Maatwebsite\Excel\ExcelServiceProvider&amp;#34; Usage To parse an Excel file 1 2 3 ini_set (&amp;#39;memory_limit&amp;#39;, &amp;#39;1024M&amp;#39;); $data = Excel::load(&amp;#39;excel.</description></item><item><title>Laravel ElasticSearch Plugin</title><link>https://blog.adminchao.com/posts/laravel-elasticsearch-plugin/</link><pubDate>Fri, 08 Jun 2018 12:43:00 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-elasticsearch-plugin/</guid><description>ElasticSearch Problems and Usage The solution of index.max_result_window error 1 curl -XPUT &amp;#34;http://localhost:9200/my_index/_settings&amp;#34; -d &amp;#39;{ &amp;#34;index&amp;#34; : { &amp;#34;max_result_window&amp;#34; : 100000000 } }&amp;#39; Search Package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static function SearchAccountLogEs($must = array(),$must_not = array(),$should = array(),$aggs = array(),$size = 10,$page = 1,$sort = array(),$debug = false){ $index = Config::get(&amp;#39;elasticsearch.</description></item><item><title>Laravel Eloquent Bracket Query</title><link>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</link><pubDate>Fri, 08 Jun 2018 12:36:54 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-eloquent-bracket-query/</guid><description>Is equivalent to select * from queue_second_sold where status=0 and (buy_user_id = 341 or (sell_user_id = 341 and buy_user_id != 0)) order by id desc,and is used as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 /** * Trading Floor - Directed Trading * @param Request $request * @return \Illuminate\Http\JsonResponse */ public function soldList(Request $request){ $type = $request-&amp;gt;get(&amp;#39;type&amp;#39;,0); // Trading Floor $limit = $request-&amp;gt;get(&amp;#39;limit&amp;#39;,10); $user = User::getUserInfo(); if($type == 1){ //Directed Transactions $results = QueueSecondSold::where(&amp;#39;status&amp;#39;,0) -&amp;gt;where(function($query) use ($user){ $query-&amp;gt;where(&amp;#39;sell_user_id&amp;#39;,$user-&amp;gt;id) -&amp;gt;where(&amp;#39;buy_user_id&amp;#39;,&amp;#39;!</description></item><item><title>Laravel Paginate</title><link>https://blog.adminchao.com/posts/laravel-paginate/</link><pubDate>Fri, 08 Jun 2018 11:56:23 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-paginate/</guid><description>Preface Using the paginate method of Laravel Eloquent will make it easy to paginate the data. It works very well! I like it too much.
Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //paginate source code public function paginate($perPage = 15, $columns = [&amp;#39;*&amp;#39;], $pageName = &amp;#39;page&amp;#39;, $page = null) { $page = $page ?</description></item><item><title>Laravel Global Scopes</title><link>https://blog.adminchao.com/posts/laravel-global-scopes/</link><pubDate>Fri, 08 Jun 2018 11:41:08 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-global-scopes/</guid><description>Preface The global scope is used to globally add the execution constraint to all the model operations involved after adding it. For example: the original select * from user becomes select * from user where is_delete = 0 after adding
Usage Create App/Scopes/SiteScope.php ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;?</description></item><item><title>Laravel Generating Test Data</title><link>https://blog.adminchao.com/posts/laravel-generating-test-data/</link><pubDate>Thu, 08 Mar 2018 11:14:46 +0000</pubDate><guid>https://blog.adminchao.com/posts/laravel-generating-test-data/</guid><description>Preface Using Laravel Faker to generate test data is very convenient for testing and debugging.
Usage Open app/database/factories/ModelFactory.php Edit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 $factory-&amp;gt;define(App\User::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); //chinese package return [ &amp;#39;openid&amp;#39; =&amp;gt; str_random(10), &amp;#39;nickname&amp;#39; =&amp;gt; $faker-&amp;gt;name, //Chinese name &amp;#39;mobile&amp;#39; =&amp;gt; $faker-&amp;gt;phoneNumber, &amp;#39;avatar&amp;#39; =&amp;gt; $faker-&amp;gt;imageUrl(), &amp;#39;integral&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(3), &amp;#39;balance&amp;#39; =&amp;gt; $faker-&amp;gt;randomFloat(2, 0, 10000), // Random floating point number, 2 decimal places, min 0, max 10000 &amp;#39;birthday&amp;#39; =&amp;gt; $faker-&amp;gt;date(), &amp;#39;created_time&amp;#39; =&amp;gt; $faker-&amp;gt;unixTime(), &amp;#39;password&amp;#39; =&amp;gt; App\User::generatePassword(&amp;#39;haha123&amp;#39;), // Available model methods to generate data ]; }); $factory-&amp;gt;define(App\Product::class, function (Faker\Generator $faker) { $faker = Faker\Factory::create(&amp;#39;zh_CN&amp;#39;); // Use the model to generate the array to be associated with the random $seller = App\Seller::where(&amp;#39;status&amp;#39;, 1)-&amp;gt;get()-&amp;gt;toArray(); foreach ($seller as $value) { $row[] = $value[&amp;#39;id&amp;#39;]; } return [ &amp;#39;product_no&amp;#39; =&amp;gt; $faker-&amp;gt;randomNumber(8), &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;【Test Products】&amp;#39; .</description></item></channel></rss>